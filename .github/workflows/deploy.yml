name: Deploy

on:
  push:
    branches: [master]

jobs:
  package-and-deploy-to-stage:
    runs-on: ubuntu-latest
    env:
      working-directory: ./Glasswall.CloudSdk.AWS.S3FileUpload
      AWS_ACCESS_KEY_ID: ${{ secrets.STAGE_SECRET_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGE_SECRET_KEY }}
      SERVICE_ROOT: ./Glasswall.CloudSdk.AWS.S3FileUpload
    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ secrets.TOKEN_GITHUB }}
    - name: Setup .NET Core 🔧
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.806
    - name: Install dependencies 🔧
      run: dotnet restore
      working-directory: ${{env.working-directory}}
    - name: Build 🔨
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{env.working-directory}}
    - name: Install AWS Tools 🔧
      run: dotnet tool install -g Amazon.Lambda.Tools
      working-directory: ${{env.working-directory}}
    - name: Package 📦
      run: dotnet lambda package ${{env.working-directory}}/genPresignedURLHandler.zip -pl ${{env.working-directory}}
    - name: Upload package ⬆
      uses: actions/upload-artifact@v1
      with:
        name: S3FileUpload
        path: ${{env.working-directory}}/genPresignedURLHandler.zip        
    - name: npm install
      run: npm install
      working-directory: ${{env.working-directory}}
    - name: serverless deploy to stage 🚀        
      uses: aaronpanch/action-serverless@v1.0.0      
      with:
          args: deploy --stage stage            
       
#   end-to-end-test:
#     runs-on: ubuntu-latest
#     needs: [deploy-to-qa]
#     steps:
#       - name: Set up Python 3.7 🐍
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'
#       - name: Install dependencies 🔧
#         run: |
#           python -m pip install --upgrade pip
#           pip install glasswall-aws-product-test-automation
#       - name: Run Tests 🧪
#         run: s93_test_automation --product "rebuild" --endpoint "${{ secrets.QA_API_ENDPOINT }}" --api_key "${{ secrets.QA_API_KEY }}" 

  package-and-deploy-to-prod-1:
    needs: [package-and-deploy-to-stage]
    runs-on: ubuntu-latest
    env:
      working-directory: ./Glasswall.CloudSdk.AWS.S3FileUpload
      AWS_ACCESS_KEY_ID: ${{ secrets.PROD1_SECRET_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD1_SECRET_KEY }}
      SERVICE_ROOT: ./Glasswall.CloudSdk.AWS.S3FileUpload
    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ secrets.TOKEN_GITHUB }}
    - name: Setup .NET Core 🔧
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.806
    - name: Install dependencies 🔧
      run: dotnet restore
      working-directory: ${{env.working-directory}}
    - name: Build 🔨
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{env.working-directory}}
    - name: Install AWS Tools 🔧
      run: dotnet tool install -g Amazon.Lambda.Tools
      working-directory: ${{env.working-directory}}
    - name: Package 📦
      run: dotnet lambda package ${{env.working-directory}}/genPresignedURLHandler.zip -pl ${{env.working-directory}}
    - name: Upload package ⬆
      uses: actions/upload-artifact@v1
      with:
        name: S3FileUpload
        path: ${{env.working-directory}}/genPresignedURLHandler.zip        
    - name: npm install
      run: npm install
      working-directory: ${{env.working-directory}}
    - name: serverless deploy to prod 🚀        
      uses: aaronpanch/action-serverless@v1.0.0      
      with:
          args: deploy --stage prod            
